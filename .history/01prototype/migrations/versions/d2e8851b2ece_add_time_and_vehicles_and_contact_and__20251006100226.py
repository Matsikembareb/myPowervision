"""Add time and vehicles and contact and assistants

Revision ID: d2e8851b2ece
Revises: a41a04675466
Create Date: 2025-10-06 09:46:25.796363

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd2e8851b2ece'
down_revision = 'a41a04675466'
branch_labels = None
depends_on = None


def upgrade():
    # Check if vehicle table exists before creating
    connection = op.get_bind()
    inspector = sa.inspect(connection)

    if 'vehicle' not in inspector.get_table_names():
        op.create_table('vehicle',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('vehicle_number', sa.String(length=20), nullable=False),
        sa.Column('make', sa.String(length=64), nullable=True),
        sa.Column('model', sa.String(length=64), nullable=True),
        sa.Column('year', sa.Integer(), nullable=True),
        sa.Column('color', sa.String(length=32), nullable=True),
        sa.Column('vehicle_type', sa.String(length=64), nullable=True),
        sa.Column('fuel_type', sa.String(length=32), nullable=True),
        sa.Column('capacity', sa.String(length=64), nullable=True),
        sa.Column('status', sa.String(length=32), nullable=True),
        sa.Column('mileage', sa.Float(), nullable=True),
        sa.Column('last_service_date', sa.DateTime(), nullable=True),
        sa.Column('next_service_date', sa.DateTime(), nullable=True),
        sa.Column('insurance_expiry', sa.DateTime(), nullable=True),
        sa.Column('notes', sa.String(length=512), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('vehicle', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_vehicle_created_at'), ['created_at'], unique=False)
            batch_op.create_index(batch_op.f('ix_vehicle_updated_at'), ['updated_at'], unique=False)
            batch_op.create_index(batch_op.f('ix_vehicle_vehicle_number'), ['vehicle_number'], unique=True)

    op.create_table('job_assistant',
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['job.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('job_id', 'user_id')
    )
    with op.batch_alter_table('job', schema=None) as batch_op:
        batch_op.add_column(sa.Column('time_allocated', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('contact_person', sa.String(length=128), nullable=True))
        batch_op.add_column(sa.Column('contact', sa.String(length=128), nullable=True))
        batch_op.add_column(sa.Column('vehicle_id', sa.Integer(), nullable=True))
        batch_op.create_index(batch_op.f('ix_job_vehicle_id'), ['vehicle_id'], unique=False)
        batch_op.create_foreign_key(None, 'vehicle', ['vehicle_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('job', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_job_vehicle_id'))
        batch_op.drop_column('vehicle_id')
        batch_op.drop_column('contact')
        batch_op.drop_column('contact_person')
        batch_op.drop_column('time_allocated')

    op.drop_table('job_assistant')
    with op.batch_alter_table('vehicle', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_vehicle_vehicle_number'))
        batch_op.drop_index(batch_op.f('ix_vehicle_updated_at'))
        batch_op.drop_index(batch_op.f('ix_vehicle_created_at'))

    op.drop_table('vehicle')
    # ### end Alembic commands ###
